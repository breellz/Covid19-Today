{"version":3,"sources":["components/Header.js","components/SearchCase.js","components/Country.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","title","subtitle","href","SearchCase","onSubmit","handleSubmit","type","name","Country","i","this","cases","length","country","myCountry","key","NewConfirmed","NewDeaths","NewRecovered","TotalConfirmed","TotalDeaths","TotalRecovered","handleDisplay","React","Component","App","bind","state","undefined","loading","e","preventDefault","NewCountry","target","elements","option","value","setState","prevState","filter","searched","fetch","then","res","json","resp","catch","err","console","log","response","Countries","map","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.815d391e.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../css/Header.css';\r\nimport '../css/container.css'\r\n\r\nconst Header =(props)=>{\r\n        return(\r\n            <div className=\"header container\">\r\n             <h1 className=\"header__title\">{props.title}</h1>\r\n             <h2 className=\"header__subtitle\">{props.subtitle}</h2><br />\r\n             <p>API provided by <a href=\"https://twitter.com/ksredelinghuys\">Kyle Rdelinghuys</a></p>\r\n             <p>Data from <a href=\"https://github.com/CSSEGISandData/COVID-19\">Johns Hopkins CSSE</a></p>\r\n             <p>Built by <a href=\"https://twitter.com/breellz\">Bassit Owolabi</a></p>\r\n             <p>Please Search by country and with the first letter capitalized</p>\r\n            </div>\r\n        )\r\n}\r\n\r\n\r\nexport default Header","import React from 'react';\r\nimport '../css/container.css';\r\nimport '../css/SearchCase.css';\r\n\r\nconst SearchCase =(props)=>{\r\n    return(\r\n        <div>\r\n       \r\n        <form  className=\"container search\" onSubmit = {props.handleSubmit}>\r\n        \r\n        <input className=\"search_input\" type =\"text\" name =\"option\">\r\n        </input><button className=\"button\">Search</button>\r\n        </form>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default SearchCase","import React from 'react';\r\n\r\nclass Country extends React.Component{\r\n handleDisplay(){\r\n    for(let i =0; i < this.props.cases.length; i++){\r\n        if(this.props.cases[i].Country === this.props.country){\r\n            const myCountry =this.props.cases[i]\r\n            return(\r\n                <div>\r\n                <div>\r\n                <h3 className = \"container\">Your Country: {this.props.country}</h3>\r\n                </div>\r\n                <div>\r\n                <ol>\r\n             <p className=\" container cases_body \">\r\n            <li className=\"cases_text\" key = {myCountry.Country}>\r\n            Country:  {myCountry.Country}<br /> \r\n            New Confirmed :  {myCountry.NewConfirmed}<br />\r\n            New Deaths:   {myCountry.NewDeaths}<br />\r\n            New Recovered:   {myCountry.NewRecovered}<br />\r\n            Total Confirmed:  {myCountry.TotalConfirmed}<br />\r\n            Total Deaths:  {myCountry.TotalDeaths}<br />\r\n            Total Recovered:  {myCountry.TotalRecovered}\r\n            </li></p>\r\n            </ol>\r\n                </div>\r\n                <h3 className=\"container\">Other Countries:</h3>\r\n                </div>\r\n            )\r\n        } \r\n    \r\n }\r\n}\r\n \r\n    render(){\r\n        return(\r\n            <div>\r\n            \r\n            {this.handleDisplay()}\r\n            </div>\r\n        )\r\n\r\n}\r\n}\r\n\r\nexport default Country","import React from 'react';\r\nimport Header from './components/Header';\r\nimport './css/base.css';\r\nimport './css/cases.css'\r\nimport SearchCase from './components/SearchCase';\r\nimport Country from './components/Country';\r\nimport './css/loader.css';\r\n\r\nclass App extends React.Component{\r\n  constructor(props){\r\n    super(props)\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    //state\r\n    this.state ={\r\n        cases : [],\r\n        country : undefined,\r\n        loading: false\r\n    }\r\n}\r\nhandleSubmit(e){\r\n  e.preventDefault();\r\n  const NewCountry = e.target.elements.option.value;\r\n  this.setState((prevState)=>({cases: prevState.cases.filter((searched)=>{\r\n    return NewCountry === searched.Country\r\n  })}))\r\n  \r\n\r\n  \r\n}\r\ncomponentDidMount(){\r\n    fetch('https://extreme-ip-lookup.com/json')\r\n    .then(res => res.json())\r\n    .then(resp => this.setState(()=>({\r\n      country: resp.country\r\n    })))\r\n    .catch(err => console.log(err))\r\n\r\n    this.setState(()=>({loading: true}))\r\n\r\n     fetch('https://api.covid19api.com/summary').then(response =>response.json())\r\n    .then(response => this.setState(()=>({\r\n        cases: response.Countries,\r\n        loading: false\r\n    })))\r\n}\r\n\r\n\r\nrender(){\r\n  const title = \"COVID-19 TODAY\"\r\n    const subtitle =\"Helping data get where it's needed\"\r\n    return(\r\n      <div>\r\n      <div>\r\n         <Header  title = {title} subtitle = {subtitle}/>\r\n         \r\n         <SearchCase handleSubmit ={this.handleSubmit} />\r\n         <Country country = {this.state.country} cases = {this.state.cases} />\r\n      </div>\r\n\r\n        <div>\r\n        <ol>\r\n        {!this.state.loading ? this.state.cases.map((value)=> <p className=\" container cases_body \">\r\n        <li className=\"cases_text\" key = {value.Country}>\r\n        Country:  {value.Country}<br /> \r\n        New Confirmed :  {value.NewConfirmed}<br />\r\n        New Deaths:   {value.NewDeaths}<br />\r\n        New Recovered:   {value.NewRecovered}<br />\r\n        Total Confirmed:  {value.TotalConfirmed}<br />\r\n        Total Deaths:  {value.TotalDeaths}<br />\r\n        Total Recovered:  {value.TotalRecovered}\r\n        </li></p>): <div className=\" container loader\"></div>}\r\n        </ol>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n}\r\n\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}