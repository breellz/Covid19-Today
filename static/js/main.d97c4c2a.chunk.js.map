{"version":3,"sources":["components/Header.js","components/Cases.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","title","subtitle","href","Cases","state","cases","fetch","then","response","json","setState","Countries","this","map","value","key","Country","NewConfirmed","NewDeaths","NewRecovered","TotalConfirmed","TotalDeaths","TotalRecovered","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6SAkBeA,G,YAdD,SAACC,GACP,OACI,yBAAKC,UAAU,oBACd,wBAAIA,UAAU,iBAAiBD,EAAME,OACrC,wBAAID,UAAU,oBAAoBD,EAAMG,UAAc,6BACtD,8CAAmB,uBAAGC,KAAK,sCAAR,qBAAqE,6BACxF,wCAAa,uBAAGA,KAAK,8CAAR,uBAA+E,6BAC5F,uCAAY,uBAAGA,KAAK,+BAAR,mBAA4D,gCC0BtEC,G,8DAlCV,WAAYL,GAAO,IAAD,8BACd,cAAMA,IAEDM,MAAO,CACRC,MAAQ,IAJE,E,gEAOE,IAAD,OACfC,MAAM,sCAAsCC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACpEF,MAAK,SAAAC,GAAQ,OAAI,EAAKE,UAAS,iBAAK,CACjCL,MAAOG,EAASG,mB,+BAMpB,OACI,6BACA,4BACCC,KAAKR,MAAMC,MAAMQ,KAAI,SAACC,GAAD,OAAU,uBAAGf,UAAU,wBAAuB,wBAAIA,UAAU,aAAagB,IAAOD,EAAME,SAAxC,cACxDF,EAAME,QAAQ,6BAD0C,oBAElDF,EAAMG,aAAa,6BAF+B,iBAGrDH,EAAMI,UAAU,6BAHqC,oBAIlDJ,EAAMK,aAAa,6BAJ+B,qBAKjDL,EAAMM,eAAe,6BAL4B,kBAMpDN,EAAMO,YAAY,6BANkC,qBAOjDP,EAAMQ,0B,GA3BlBC,IAAMC,YCkBXC,E,uKATX,OACE,6BACG,kBAAC,EAAD,CAASzB,MALA,iBAKgBC,SAJd,uCAKX,kBAAC,EAAD,W,GATSsB,IAAMC,WCOJE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d97c4c2a.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../css/Header.css';\r\nimport '../css/container.css'\r\n\r\nconst Header =(props)=>{\r\n        return(\r\n            <div className=\"header container\">\r\n             <h1 className=\"header__title\">{props.title}</h1>\r\n             <h2 className=\"header__subtitle\">{props.subtitle}</h2><br />\r\n             <p>API provided by <a href=\"https://twitter.com/ksredelinghuys\">Kyle Rdelinghuys</a></p><br />\r\n             <p>Data from <a href=\"https://github.com/CSSEGISandData/COVID-19\">Johns Hopkins CSSE</a></p><br />\r\n             <p>Built by <a href=\"https://twitter.com/breellz\">Bassit Owolabi</a></p><br />\r\n\r\n            </div>\r\n        )\r\n}\r\n\r\n\r\nexport default Header","import React from \"react\";\r\nimport '../css/cases.css';\r\nclass Cases extends React.Component{\r\n     constructor(props){\r\n         super(props)\r\n         //state\r\n         this.state ={\r\n             cases : []\r\n         }\r\n     }\r\n     componentDidMount(){\r\n         fetch('https://api.covid19api.com/summary').then(response =>response.json())\r\n         .then(response => this.setState(()=>({\r\n             cases: response.Countries\r\n         })))\r\n     }\r\n\r\n\r\n     render(){\r\n         return(\r\n             <div>\r\n             <ol>\r\n             {this.state.cases.map((value)=> <p className=\"cases_body container\"><li className=\"cases_text\" key = {value.Country}>\r\n             Country:   {value.Country}<br /> \r\n             New Confirmed :  {value.NewConfirmed}<br />\r\n             New Deaths:   {value.NewDeaths}<br />\r\n             New Recovered:   {value.NewRecovered}<br />\r\n             Total Confirmed:  {value.TotalConfirmed}<br />\r\n             Total Deaths:  {value.TotalDeaths}<br />\r\n             Total Recovered:  {value.TotalRecovered}\r\n             </li></p>)}\r\n             </ol>\r\n             </div>\r\n         )\r\n     }\r\n } \r\n\r\nexport default Cases","import React from 'react';\nimport Header from './components/Header';\nimport './css/base.css';\nimport Cases from './components/Cases';\n\nclass App extends React.Component{\n\n  render(){\n    const title = \"COVID-19 TODAY\"\n    const subtitle =\"Helping data get where it's needed\"\n\n    return(\n      <div>\n         <Header  title = {title} subtitle = {subtitle}/>\n         <Cases />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}